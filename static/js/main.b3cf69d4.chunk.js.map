{"version":3,"sources":["assets/loader.gif","database/index.ts","stores/App.tsx","components/ProgressBar/ProgressBar.tsx","app/LoadingPage/LoadingPage.tsx","app/Root/index.tsx","serviceWorker.js","index.tsx","app/index.tsx"],"names":["module","exports","cats","version","stores","table","Dexie","APP_STATE","AppContext","React","createContext","appState","progressVariants","init","width","animate","duration","transition","type","ease","styles","css","ProgressBar","className","cx","div","initial","variants","custom","enter","opacity","exit","LoadingPage","label","timeout","src","loadingGif","alt","Root","Boolean","window","location","hostname","match","ReactDOM","render","children","useState","setAppState","setCats","useEffect","length","Promise","resolve","setTimeout","db","toArray","then","a","async","currentElo","value","date","Date","bulkAdd","catsData","map","image","eloEvolution","Provider","useDarkMode","useContext","exitBeforeEnter","key","undefined","document","getElementById","body","style","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3cf69d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.9471402a.gif\";","import Dexie from 'dexie';\nimport { Cat } from 'types/cat';\n\nclass CatMashDatabase extends Dexie {\n  cats: Dexie.Table<Cat, number>;\n\n  constructor() {\n    super('CatMashDB');\n    this.version(1).stores({\n      cats: '++id, image, currentElo, *eloEvolution',\n    });\n    this.cats = this.table('cats');\n  }\n}\n\nexport default new CatMashDatabase();\n","import React, { useEffect, useState } from 'react';\nimport { Cats } from 'types/cat';\nimport db from 'database';\nimport catsData from 'assets/cats.json';\nimport { Elo } from 'types/Elo';\n\nconst START_ELO = 1000;\nconst LOADING_SCREEN_DURATION = 2500;\n\nconst init = async (): Promise<Cats> => {\n  const currentElo: Elo = { value: START_ELO, date: new Date() };\n\n  await db.cats.bulkAdd(\n    catsData.map(image => ({\n      image,\n      currentElo,\n      eloEvolution: [],\n    })),\n  );\n\n  return new Promise<Cats>(resolve => {\n    setTimeout(() => {\n      resolve(db.cats.toArray());\n    }, 1200);\n  });\n};\n\nexport const APP_STATE = {\n  LOADING: 'loading',\n  INITIALISING: 'init',\n  READY: 'ready',\n};\n\ntype AppContextType = {\n  appState: string;\n  cats: Cats;\n};\n\nexport const AppContext = React.createContext<AppContextType>({\n  appState: APP_STATE.LOADING,\n  cats: [],\n});\n\nexport const AppProvider: React.FC = ({ children }) => {\n  const [appState, setAppState] = useState(APP_STATE.LOADING);\n  const [cats, setCats] = useState<Cats>([]);\n\n  useEffect(() => {\n    const loadCats = (): Promise<Cats> => {\n      return new Promise<Cats>(resolve => {\n        setTimeout(() => {\n          resolve(db.cats.toArray());\n        }, LOADING_SCREEN_DURATION);\n      });\n    };\n\n    if (cats.length === 0) {\n      loadCats().then(cats => {\n        if (cats.length !== 0) {\n          setCats(cats);\n        } else {\n          setAppState(APP_STATE.INITIALISING);\n        }\n      });\n    } else {\n      setCats(cats);\n      setAppState(APP_STATE.READY);\n    }\n  }, [cats]);\n\n  useEffect(() => {\n    if (appState === APP_STATE.INITIALISING) {\n      init().then(cats => {\n        setCats(cats);\n        setAppState(APP_STATE.READY);\n      });\n    }\n  }, [appState]);\n\n  return <AppContext.Provider value={{ appState, cats }}>{children}</AppContext.Provider>;\n};\n\nexport const useApp = (): AppContextType => React.useContext(AppContext);\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { css, cx } from 'emotion';\n\nconst progressVariants = {\n  init: { width: 0 },\n  animate: (duration: number): any => ({\n    width: '100%',\n    transition: {\n      type: 'tween',\n      ease: 'linear',\n      duration: duration / 1000,\n    },\n  }),\n};\n\nconst styles = css`\n  width: 90%;\n  max-width: 360px;\n  height: 3px;\n  background-color: var(--secondary-color);\n  position: relative;\n\n  > .progress-bar {\n    position: absolute;\n    height: 100%;\n    background-image: linear-gradient(to right, #3579d7, #3f6bdf, #585ae1, #7640de, #9400d3);\n  }\n`;\n\ninterface Props {\n  duration: number;\n}\n\nexport const ProgressBar: React.FC<Props> = ({ duration }) => {\n  return (\n    <div className={cx(styles, 'progress')}>\n      <motion.div\n        animate=\"animate\"\n        initial=\"init\"\n        className=\"progress-bar\"\n        variants={progressVariants}\n        custom={duration}\n      />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport { css } from 'emotion';\nimport { motion } from 'framer-motion';\nimport loadingGif from 'assets/loader.gif';\nimport { ProgressBar } from 'components';\n\ninterface Props {\n  label?: string;\n  timeout: number;\n}\n\nconst styles = css`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  > img {\n    width: 60%;\n    max-width: 380px;\n  }\n\n  > .label {\n    margin-top: 50px;\n    height: 2rem;\n    font-size: 1.4rem;\n  }\n\n  > .progress {\n    margin-top: 50px;\n  }\n`;\n\nconst variants = {\n  enter: {\n    opacity: 1,\n    transition: {\n      duration: 0.4,\n    },\n  },\n  exit: {\n    opacity: 0,\n    transition: {\n      duration: 0.4,\n    },\n  },\n};\n\nexport const LoadingPage: React.FC<Props> = ({ label, timeout }) => {\n  return (\n    <motion.div className={styles} animate=\"enter\" exit=\"exit\" variants={variants}>\n      <img src={loadingGif} alt=\"Chargement...\" />\n      <div className=\"label\">{label}</div>\n      <ProgressBar duration={timeout} />\n    </motion.div>\n  );\n};\n","import React from 'react';\n\nexport const Root: React.FC = () => {\n  return <div />;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'app';\nimport * as serviceWorker from 'serviceWorker';\nimport { AppProvider } from 'stores';\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root'),\n);\n\nsetTimeout(() => {\n  document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\n}, 1000);\n\nserviceWorker.unregister();\n","import React from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport { AnimatePresence } from 'framer-motion';\nimport { APP_STATE, useApp } from 'stores/App';\nimport { LoadingPage } from './LoadingPage';\nimport { Root } from './Root';\n\nconst TRANSITION = 2500;\n\nexport const App: React.FC = () => {\n  useDarkMode();\n  const { appState } = useApp();\n\n  return (\n    <AnimatePresence initial={false} exitBeforeEnter>\n      {(appState === APP_STATE.LOADING || appState === APP_STATE.INITIALISING) && (\n        <LoadingPage\n          key={APP_STATE.LOADING}\n          timeout={TRANSITION}\n          label={appState === APP_STATE.INITIALISING ? 'Création des profils...' : undefined}\n        />\n      )}\n      {appState === APP_STATE.READY && <Root key={APP_STATE.READY} />}\n    </AnimatePresence>\n  );\n};\n"],"sourceRoot":""}